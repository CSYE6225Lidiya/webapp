name: AMI Build Workflow

on:
  pull_request:
    types:
      - closed 

jobs:
  ami-build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test
        ports:
            - '8888:3306'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
    steps:
    - name: Check if PR is merged
      id: pr_check
      run: echo ::set-output name=is_merged::$(if [ "${{ github.event.pull_request.merged }}" == "true" ]; then echo "true"; else echo "false"; fi)

    - name: Check out code
      if: steps.pr_check.outputs.is_merged == 'true'
      uses: actions/checkout@v2

    - name: SetUp Go
      if: steps.pr_check.outputs.is_merged == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: '1.20' 

    - name: Check Go Installation
      if: steps.pr_check.outputs.is_merged == 'true'
      run: go version

    - name: Download go dependencies
      if: steps.pr_check.outputs.is_merged == 'true'
      run: go mod download

    - name: Run Go Integration Test
      if: steps.pr_check.outputs.is_merged == 'true'
      run: |
        pwd
        export DB_HOST=127.0.0.1
        export DB_PORT=8888
        export DB_USER=root
        export DB_PASSWORD=password
        export DB_NAME=test
        echo $DB_HOST
        go test

    - name: Build Artifact - Go Binary
      if: steps.pr_check.outputs.is_merged == 'true'
      run: |
        pwd
        ls 
        go build -o myapp main.go
        ls 

    - name: Copy artifiact to a new location
      if: steps.pr_check.outputs.is_merged == 'true'
      run: |
        pwd
        mkdir target
        cp myapp ./target
        cd target
        ls 

    - name: Configure AWS Credentials for Github Actions
      if: steps.pr_check.outputs.is_merged == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: us-east-1
        
    - name: Set up Packer
      if: steps.pr_check.outputs.is_merged == 'true'
      uses: hashicorp/setup-packer@main
      with:
        version: latest  # Use the latest version of Packer

    - name: Packer Init
      if: steps.pr_check.outputs.is_merged == 'true'
      run: |
        cd packer
        packer init .

    - name: Packer Validate
      if: steps.pr_check.outputs.is_merged == 'true'
      run: |
        pwd
        cd packer
        packer validate .
      
        exit_status=$?

        if [ $exit_status -eq 0 ]; then
          echo "Validated Successfully"
        else
          echo "Validation failed."
        fi

    - name: Check env values
      if: steps.pr_check.outputs.is_merged == 'true'
      run: |
          echo "The variable value is ${{vars.AMI_DESCRIPTION}}"
          echo "The variable value is ${{vars.AMI_NAME}}"
          echo "The variable value is ${{vars.AWS_REGION}}"
          echo "The variable value is ${{vars.SOURCE_AMI}}"
          echo "The variable value is ${{vars.SSH_USERNAME}}"
          echo "The variable value is ${{vars.SUBNET_ID}}"

    - name: Packer Build
      if: success()
      run: |
        pwd
        ls
        packer build -var ami_name=${{vars.AMI_NAME}} -var ssh_username=${{vars.SSH_USERNAME}} -var aws_region=${{vars.AWS_REGION}} -var source_ami=${{vars.SOURCE_AMI}} -var subnet_id=${{vars.SUBNET_ID}} ./packer

    - name: Create New Launch Template
      if: success()
      run: |
        ami_id=$(aws ec2 describe-images --region us-east-1 --filters "Name=name,Values=${{vars.AMI_NAME}}" "Name=is-public,Values=false" "Name=state,Values=available" --query "Images[0].ImageId" --output text)
        echo "AMI ID: $ami_id"
        aws ec2 create-launch-template-version --launch-template-id ${{vars.LAUNCH_TEMP_ID}} --version-description version2 --source-version 1 --launch-template-data "ImageId=$ami_id"
      env:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: us-east-1

    - name: Update Auto scaling Group with new launch template version
      if: success()
      run: |
        aws autoscaling update-auto-scaling-group --auto-scaling-group-name asg --launch-template LaunchTemplateName=launchTemplate,Version='2'
      env:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: us-east-1

    - name: AutoScale Group Refresh
      if: success()
      run: |
        aws autoscaling start-instance-refresh --auto-scaling-group-name asg
      env:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: us-east-1

    - name: Wait for Instance Refresh to Complete
      run: |
        while true; do
          status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name asg --query 'InstanceRefreshes[0].Status' --output text)
          if [ "$status" = "Successful" ]; then
            echo "Instance refresh completed successfully."
            break
          elif [ "$status" = "Failed" ]; then
            echo "Instance refresh failed."
            exit 1
          else
            echo "Instance refresh is still in progress. Waiting..."
            sleep 60  # Adjust the sleep duration based on your requirements
          fi
        done
      env:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: us-east-1
      